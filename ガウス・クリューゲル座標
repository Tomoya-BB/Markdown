以下は、ガウス・クリューゲル投影法によって、ある地域用に定義された「平面直角座標系」を求める手順を、できるだけわかりやすく解説したものです。その上で、日本の平面直角座標系（例：第7系）と、デンマークで使用されるDKTM2を例に挙げます。また、デンマークではDKTM2以外にも異なる原点を使う投影系があるため、それらについても簡単に触れます。最後に、この解説に対応するC言語ソースコードを、数式および説明内容と連動させる形で示します。

基本的な考え方

目的：
緯度経度（φ:緯度, λ:経度）で表される地球上の点を、2次元平面(X,Y)で表したい。

問題点：
地球は球（正確には回転楕円体）なので、緯度経度は「曲面上の位置」を角度で示している。これを「平面」に正確に写すことはできない。

解決手段（投影法）：
ガウス・クリューゲル投影（横メルカトル投影）という数学的手法を用いて、ある中央経線(基準となる経度線)を選び、その付近ではひずみが小さくなるように地球表面を平面に写し取る。
ただし、完全に歪み0は不可能だが、特定地域内で誤差が小さくなるようパラメータを調整する。

パラメータ：
	1.	楕円体定数
	•	長半径 a
	•	扁平率 f
	•	離心率²: e² = 2f - f²
（WGS84やGRS80といった国際標準の楕円体が使われる）
	2.	原点・投影パラメータ
	•	基準緯度 φ0
	•	基準経度 λ0（この子午線が中心線）
	•	縮尺係数 k0（中央付近の縮尺を微調整するため）
	•	偽東距(FE)、偽北距(FN)（座標値を常に正にするためのオフセット）

これらを使って、(φ, λ) → (X, Y) を計算する。

数式のわかりやすい説明
	1.	N(φ)：曲率半径
￼
緯度φにおける地表面の「横方向の半径」を求める式。
φが与えられればN(φ)が計算できる。
	2.	補助的な記号：
￼
￼
	•	Tは緯度に依存する傾き成分、
	•	Cは離心率による補正項、
	•	Aは経度差(λ-λ0)をcos(φ)でスケールしたもの。
	3.	子午線弧長 M(φ)
緯度0からφまでの「子午線(経線)上の弧長」を計算する式。これがないと、縦方向(Y)にどれだけ進んでいるか分からない。
M(φ)は次のような複雑な式で求める（ここでは詳しい係数はそのまま示すが、これはテイラー展開された標準式）：
￼
φ0についても同様にM(φ0)を求めておき、差(M(φ)-M(φ0))を使う。
	4.	X,Y座標式：
最終的な平面座標(X:東方向, Y:北方向)は、以下のように表せる。
X方向（東向き座標）:
￼
Y方向（北向き座標）:
￼
見た目は複雑だが、すべて緯度φと経度差Δλ、定数e²、aなどから計算でき、プログラムで実装するのが普通。

日本の平面直角座標（第7系）のパラメータ例
	•	楕円体：GRS80
	•	原点緯度 φ0=36°N
	•	原点経度 λ0=137°10’E = 137.1666667°E
	•	縮尺 k0=0.9999
	•	FE=0, FN=0

このパラメータを式に代入すると、中部地方付近で歪みが小さい平面直角座標を得られる。

デンマークのDKTM2の場合
	•	楕円体：GRS80(ETRS89)
	•	原点緯度 φ0=0°
	•	原点経度 λ0=10°E
	•	縮尺 k0=1.0
	•	FE=600000m, FN=0m

これにより、デンマーク周辺をカバーする投影座標が得られる。

デンマークの他の原点

デンマークではDKTM1, DKTM2, DKTM3など複数のゾーンがあり、それぞれ原点となる中央経度(例えば9°E,10°E,11°E)を変えたりFEを変えたりして、デンマークの各地域で精度を高めている。
もし別の原点（例えばφ0=0°, λ0=9°E, FE=300000mなど）で定義すれば、また別のゾーンを構築できる。
このように、同じ数式でも「原点」と「パラメータ」を変えるだけで、異なる地域に最適化した座標系を作れる。

C言語ソースコード（説明内容と連携）

以下のC言語コードは、説明した数式をプログラム化したもの。
コメントで各ステップが上記説明と対応するようにした。

#include <stdio.h>
#include <math.h>

//----------------------
// 楕円体定数（GRS80相当）
//----------------------
#define A 6378137.0
#define F (1.0/298.257222101)
#define E2 (2*F - F*F) // e² = 2f - f²

#define DEG2RAD (M_PI/180.0)

//----------------------
// 子午線弧長 M(φ)計算関数
// φはラジアン単位
// 数式は上記M(φ)定義そのまま
//----------------------
static double meridian_arc(double phi) {
    double e4 = E2*E2;
    double e6 = e4*E2;

    return A * (
        (1 - E2/4 - 3*e4/64 - 5*e6/256)*phi
        - (3*E2/8 + 3*e4/32 + 45*e6/1024)*sin(2*phi)
        + (15*e4/256 + 45*e6/1024)*sin(4*phi)
        - (35*e6/3072)*sin(6*phi)
    );
}

//----------------------
// ガウス・クリューゲル投影変換関数
// 入力：緯度(lat_deg), 経度(lon_deg) [度]
//       原点緯度(phi0_deg), 原点経度(lam0_deg) [度]
//       縮尺k0, 偽東距FE, 偽北距FN
// 出力：X(m), Y(m)
//----------------------
static void latlon_to_xy(double lat_deg, double lon_deg,
                         double phi0_deg, double lam0_deg,
                         double k0, double FE, double FN,
                         double *X, double *Y) {
    // 度→ラジアン
    double phi = lat_deg * DEG2RAD;
    double lam = lon_deg * DEG2RAD;
    double phi0 = phi0_deg * DEG2RAD;
    double lam0 = lam0_deg * DEG2RAD;

    double sinphi = sin(phi);
    double cosphi = cos(phi);

    // N(φ)計算
    double N = A / sqrt(1 - E2*sinphi*sinphi);

    // T, C, Δλ, A計算
    double T = (tan(phi)*tan(phi));
    double C = (E2*cosphi*cosphi)/(1-E2);
    double dlam = lam - lam0;
    double A_ = dlam*cosphi;

    // M(φ), M(φ0)計算
    double M = meridian_arc(phi);
    double M0 = meridian_arc(phi0);

    double A2 = A_*A_;
    double A3 = A2*A_;
    double A4 = A2*A2;
    double A5 = A4*A_;
    double A6 = A4*A2;

    // X座標(東向き)
    double x_val = FE + k0 * N * (A_ + (1 - T + C)*A3/6.0
                        + (5 -18*T + T*T +72*C -58*E2)*A5/120.0);

    // Y座標(北向き)
    double y_val = FN + k0 * ((M - M0) + N*tan(phi)*(A2/2.0
                       + (5 - T +9*C +4*C*C)*A4/24.0
                       + (61 -58*T + T*T +600*C -330*E2)*A6/720.0));

    *X = x_val;
    *Y = y_val;
}

int main() {
    double X, Y;

    // 【日本 第7系の例】
    // φ0=36°N, λ0=137°10'E(=137.1666667°E), k0=0.9999, FE=0, FN=0
    // 例: 緯度37°N, 経度137.5°Eを第7系X,Yに変換
    latlon_to_xy(37.0, 137.5, 36.0, 137.1666667, 0.9999, 0.0, 0.0, &X, &Y);
    printf("Japan(7th): Lat=37.0°N Lon=137.5°E -> X=%.3f Y=%.3f (m)\n", X, Y);

    // 【デンマーク DKTM2の例】
    // φ0=0°, λ0=10°E, k0=1.0, FE=600000m, FN=0m
    // 例: 緯度56°N, 経度11°EをDKTM2 X,Yに変換
    latlon_to_xy(56.0, 11.0, 0.0, 10.0, 1.0, 600000.0, 0.0, &X, &Y);
    printf("Denmark(DKTM2): Lat=56.0°N Lon=11.0°E -> X=%.3f Y=%.3f (m)\n", X, Y);

    // 参考：他の原点を用いたデンマーク投影系を作る場合は、
    // φ0, λ0, k0, FE, FNを異なる値に設定するだけで計算可能。
    // 例えばDKTM1 (9°E基準)、DKTM3 (11°E基準)など。
    // こうするとデンマーク国内の別のゾーンに対応したX,Yが得られる。

    return 0;
}

総括
	•	ガウス・クリューゲル投影は、国や地域ごとに適切な原点(φ0, λ0)や縮尺(k0)を設定することで、その地域内で高精度な平面座標を得る方法。
	•	日本やデンマークでは、それぞれ異なるパラメータを用いるが、計算手順や式は同一。
	•	原点やパラメータを変えるだけで別の系を定義可能（日本は複数の「系」、デンマークは複数の「DKTMゾーン」）。
	•	C言語のサンプルコードは、上記解説の数式に直接対応した実装例。


以下は、前回の内容に追加する形で、デンマークで用いられるDKTM系についての情報を補足します。
DKTMはデンマークで使用される複数の投影ゾーンの総称で、中央経線(原点経度)を変えたり、偽東距(FE)を加えたりして、国土の異なる部分で精度良く位置を表せるようにしています。

DKTMの各ゾーンの原点パラメータ

デンマークには、少なくとも3つの代表的なDKTMゾーンが使われます。
以下はそのパラメータの一例です。

ゾーン名	原点緯度(φ0)	原点経度(λ0)	縮尺係数(k0)	偽東距(FE)	偽北距(FN)	用途/範囲の目安
DKTM1	0°N	9°E	1.0000	200000m	0m	デンマーク西部(ユトランド西側)
DKTM2	0°N	10°E	1.0000	600000m	0m	デンマーク中部〜ユトランド中央部
DKTM3	0°N	11°E	1.0000	1000000m	0m	デンマーク東部(シェラン島方面)

※この表は代表例であり、実務上の正確な値はデンマークの測地機関の公表資料を参照してください。基本的な構造は同じで、中央経線が9°E, 10°E, 11°Eと変化し、FE（偽東距）を変えているのがわかります。
φ0は0°とすることで、計算を簡潔にし、緯度方向についてはM(φ0)=M(0)=0となり扱いやすくしています。

DKTMでの計算例

ここでは、DKTM2を例にし、特定の緯度経度からX,Yを求める手順をもう少し具体的な数値で示します。

例：
	•	ゾーン：DKTM2
	•	パラメータ：φ0=0°、λ0=10°E、k0=1.0、FE=600000m、FN=0m
	•	点の座標：緯度φ=56.0000°N、経度λ=11.0000°E（デンマーク国内の地点）

計算ステップ（概略）
	1.	度→ラジアン変換：
φ = 56.0000° = 56×π/180 ≈0.97738438rad
λ = 11.0000° = 11×π/180 ≈0.19198622rad
φ0=0°=0rad、λ0=10°E=10×π/180=0.17453293rad
	2.	基本量計算：
E2 = 2f - f²（既にコード内定義）
sinφ=sin(0.97738438)、cosφ=cos(0.97738438)
λ-λ0=0.19198622-0.17453293=0.01745329rad
A=(λ-λ0)*cosφ
N(φ)= a / sqrt(1 - e² sin²φ)
T=tan²φ、C=(e² cos²φ)/(1-e²)
	3.	M(φ), M(φ0)計算：
φ0=0なのでM(φ0)=0になり計算簡略。
M(φ)=上述のM(φ)式にφ=0.97738438を代入（プログラムで計算）
	4.	X, Y計算：
X = FE + k0*N(φ)[A + (1-T+C)A³/6 + … ]
Y = FN + k0[M(φ)-M(φ0) + N(φ)tan(φ)(A²/2 + … )]

実際の計算はコードに任せますが、仮にプログラムを実行すればX,Yが求まり、Xは約60～70万m程度、Yは数百万m程度の値が得られます。

C言語ソースコード（DKTMゾーンの切替例）

以下のコードは、前回のコードにDKTM1, DKTM2, DKTM3の設定例を表として追加し、その中から選ぶ形にします。コメント内で数式との対応と、原点パラメータの選択を分かりやすくします。



まとめ
	•	ガウス・クリューゲル投影の数式は複雑に見えるが、全ては緯度経度、楕円体定数、原点パラメータ(φ0, λ0, k0, FE, FN)から求まる。
	•	DKTM1, DKTM2, DKTM3といった異なる原点設定は、中央経度とFEを変えることでデンマーク各地域に最適な投影座標を提供する。
	•	実際の計算はプログラム化して行うのが一般的で、上記C言語例では、パラメータを変更するだけで別のゾーンのX,Yが得られる。
	•	日本の平面直角座標系やデンマークのDKTM系は、基本手法は同じで、地域に合わせたパラメータ設定の違いによって適用範囲での精度を確保する。